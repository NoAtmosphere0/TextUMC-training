"""
The llm module contains the FakeNewsClassifier class.

The FakeNewsClassifier class is used to classify a news article as real or fake.
-----
Input: Synthesized text generated by the synthesizer module after passing the check of the hallucination checker model

Output: One of the six labels in the dataset: pants-fire, false, barely true, half-true, mostly true, and true
----- 
The base model is the XLM-RoBERTa model from Facebook AI.

The adapter model will be fine-tuned later on.
"""

import torch
from transformers import AutoModelForSequenceClassification, AutoTokenizer

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


class FakeNewsClassifier:
    """

    The FakeNewsClassifier class is used to classify a news article as real or fake.

    The base model is the XLM-RoBERTa model from Facebook AI.
    The adapter model will be fine-tuned later on.

    """

    def __init__(self, model_path: str = None, tokenizer_path: str = None):
        """Initializes the FakeNewsClassifier class with the model and tokenizer

        The base model is the XLM-RoBERTa model from Facebook AI
        The adapter model will be fine-tuned later on
        """
        if model_path and tokenizer_path:
            self.model = AutoModelForSequenceClassification.from_pretrained(
                model_path, trust_remote_code=True
            )
            self.tokenizer = AutoTokenizer.from_pretrained(
                tokenizer_path, trust_remote_code=True
            )
        else:
            self.model = AutoModelForSequenceClassification.from_pretrained(
                "../models/xlm-roberta-base"
            )
            self.tokenizer = AutoTokenizer.from_pretrained("../models/xlm-roberta-base")

    def classify(self, text: str) -> str:
        """Classifies a news article as real or fake

        There are six labels in the dataset: pants-fire, false, barely true, half-true, mostly true, and true

        Args:
            text (str): The news article to classify

        Returns:
            str: The classification of the news article as real or fake
        """
        inputs = self.tokenizer(
            text, return_tensors="pt", padding=True, truncation=True
        )
        outputs = self.model(**inputs)
        logits = outputs.logits
        probabilities = torch.nn.functional.softmax(logits, dim=1)
        predicted_class = torch.argmax(probabilities, dim=1).item()
        labels = [
            "pants-fire",
            "false",
            "barely true",
            "half-true",
            "mostly true",
            "true",
        ]

        return labels[predicted_class]
